* Análisis léxico

Verifica que las palabras usadas pertenezcan al lenguaje.
(Verifica ortografía)

Lo vamos a implementar utilizando expresiones regulares.
Las expresiones regulares tienen implementacion ITERATIVA.

* Análisis sintáctico

Verifica que la secuencia de tokens sea correcta.
Estructura gramatical del lenguajes.

Lo vamos a implementar utilizando reglas gramaticales.
La reglas sintacticas tienen implementación RECURSIVA.

Se puede realizar en forma:
 - Descendente : Top-Down parsing -> de la raíz a las hojas
 - Ascendente  : Bottom-Up parsing -> de las hojas a la raíz

* AS Descendente

entrada: (())()

Regla: s : ( s ) s
         |
         ;

$ s           ( ( ) ) ( ) $  derivar
$ s ) s (     ( ( ) ) ( ) $  match
$ s ) s         ( ) ) ( ) $  derivar
$ s ) s ) s (   ( ) ) ( ) $  match
$ s ) s ) s       ) ) ( ) $  derivar
$ s ) s )         ) ) ( ) $  match
$ s ) s             ) ( ) $  derivar
$ s )               ) ( ) $  match
$ s                   ( ) $  derivar
$ s ) s (             ( ) $  match
$ s ) s                 ) $  derivar
$ s )                   ) $  match
$ s                       $  derivar
$                         $  OK

entrada: (()

Regla: s : ( s ) s
         |
         ;

$ s              ( ( ) $  derivar
$ s ) s (        ( ( ) $  match
$ s ) s            ( ) $  derivar
$ s ) s ) s (      ( ) $  match
$ s ) s ) s          ) $  derivar
$ s ) s )            ) $  match
$ s ) s                $  derivar
$ s )                  $  ERROR

entrada: ())

Regla: s : ( s ) s
         |
         ;

$ s              ( ) ) $  derivar
$ s ) s (        ( ) ) $  match
$ s ) s            ) ) $  derivar
$ s )              ) ) $  match
$ s                  ) $  derivar
$                    ) $  ERROR


AS Ascendente

Reglas : Desplazar
         Reducir

entrada: (())()

Regla: s : ( s ) s
         |
         ;

$            ( ( ) ) ( ) $ Desplazar
$ (            ( ) ) ( ) $ Desplazar
$ ( (            ) ) ( ) $ Reducir
$ ( ( s          ) ) ( ) $ Desplazar
$ ( ( s )          ) ( ) $ Reducir
$ ( ( s ) s        ) ( ) $ Reducir
$ ( s              ) ( ) $ Desplazar
$ ( s )              ( ) $ Desplazar
$ ( s ) (              ) $ Reducir
$ ( s ) ( s            ) $ Desplazar
$ ( s ) ( s )            $ Reducir
$ ( s ) ( s ) s          $ Reducir
$ ( s ) s                $ Reducir
$ s                      $ OK

entrada: (()

Regla: s : ( s ) s
         |
         ;

$            ( ( ) $ Desplazar
$ (            ( ) $ Desplazar
$ ( (            ) $ Reducir
$ ( ( s          ) $ Desplazar
$ ( ( s )          $ Reducir
$ ( ( s ) s        $ Reducir
$ ( s              $ ERROR


entrada: ())

Regla: s : ( s ) s
         |
         ;

$            ( ) ) $ Desplazar
$ (            ) ) $ Reducir
$ ( s          ) ) $ Desplazar
$ ( s )          ) $ Reducir
$ ( s ) s        ) $ Reducir
$ s              ) $ ERROR


Código intermedio

Independiente del lenguaje de entrada y del hardware.

 -> Three Address Code (TAC)

Operación base es   ->  x = y op z

Ejemplos:
  x = y + z
  x = y + 7
  x = y
  x = 2

Armamos el código según necesidades sin usar más de 3 direcciones de memoria en cada instrucción.

label l
jmp   l
ifjmp cond, l
push x
y = pop x 

Generador de TAC
 - Generador de variables temporales (t0, t1, t2, ...)
 - Generador de etiquetas (l0, l1, l2, ...)

Funcionamiento:

in: x = b - y / a + 3
out:
 t0 = y / a
 t1 = b - t0
 t2 = t1 + 3
 x = t2

in: x = b - y / a + 3 * 10
out:
 t0 = y / a
 t1 = b - t0
 t2 = 3 * 10
 t3 = t1 + t2
 x = t3

 opt ->  t0 = y / a
         t1 = b - t0
         t2 = 30
         x = t1 + t2

         t0 = y / a
         t1 = b - t0
         x = t1 + 30
 

in:
   if (x < 0)
      y = z + 10;
   else
      y = z - 10;

out:
   t0 = x < 0
   ifjmp t0, l0
   y = z + 10
   jmp l1
   label l0
   y = z - 10
   label l1


in:
    x = 0;
    while (x < 10) {
        acc = acc + 1;
        x = x + 1;
    }

out:
    x = 0
    label l0
    t0 = x < 10
    ifjmp t0, l1
    acc = acc + 1
    x = x + 1
    jmp l0
    label l1


in:
    for (x = 0; x < 10; x = x + 1)
        acc = acc + 1;
   
out:
    x = 0
    label l0
    t0 = x < 10
    ifjmp t0, l1
    acc = acc + 1
    x = x + 1
    jmp l0
    label l1


in:
    int f (int y, int z) {
        return y * z
    }
    ...
    x = f(y,z);

out:
    label l0
    t0 = pop
    z = pop
    y = pop
    t1 = y * z
    push t1
    jmp t0

...

    push y
    push z
    push l1
    jmp l0
    label l1
    x = pop










